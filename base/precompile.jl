# This file is a part of Julia. License is MIT: https://julialang.org/license

# Steps to regenerate this file:
# 1. Remove all `precompile` calls
# 2. Rebuild system image
# 3. Enable TRACE_COMPILE in options.h and rebuild
# 4. Run `./julia 2> precompiles.txt` and do various things.
# 5. Run `grep -v '#[0-9]' precompiles.txt >> base/precompile.jl` (filters out closures, which
#    might have different generated names in different environments)

precompile(Tuple{typeof(Base.Random.__init__)})
precompile(Tuple{typeof(Base.__init__)})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.TTY})
precompile(Tuple{Type{Base.Terminals.TTYTerminal}, String, Base.TTY, Base.TTY, Base.IOStream})
precompile(Tuple{typeof(Base._start)})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Int64, Union{Base.Distributed.LocalProcess, Base.Distributed.Worker}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.DefaultClusterManager})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, GlobalRef, SSAValue, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.WorkerState})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.ProcessExitedException})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, QuoteNode, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg), Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Left})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:tunnel, :sshflags, :max_parallel), Tuple{Bool, Base.Cmd, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot, TypedSlot})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, String, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String, String, String})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.isbits), Array{Tuple{Module, String}, 1}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.SubString{String}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Bool}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Cstring})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.:(*)), Int64}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Int64, Int64, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, String, TypedSlot, String, TypedSlot, String, SlotNumber, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, GlobalRef, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Any, Any}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, Char})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Array{Base.StackTraces.StackFrame, 1}, 1}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef, SSAValue})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SSAValue, SlotNumber})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void}, Int64})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Void})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.REPLCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.ShellCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.LatexCompletions})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SlotNumber, SlotNumber, SlotNumber, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, GlobalRef, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, SlotNumber, TypedSlot, Expr})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:prefix,), Tuple{String}}}, Type{NamedTuple{(:bt,), Tuple{Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}}}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, TypedSlot, SlotNumber, Expr})
precompile(Tuple{typeof(Base.require), Symbol})
precompile(Tuple{typeof(Base.try_include), Module, String})
precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Ptr{Void}, Base.Process, Base.DevNullStream, Base.DevNullStream, Base.DevNullStream})
precompile(Tuple{typeof(Base.convert), Type{Base.Cstring}, Ptr{Void}})
precompile(Tuple{typeof(Base._uv_hook_close), Base.Process})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Base.REPL.LineEditREPL}, Base.Terminals.TTYTerminal, Bool, Bool})
precompile(Tuple{Type{Base.REPL.LineEditREPL}, Base.Terminals.TTYTerminal, Bool, String, String, String, String, String, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Base.REPL.REPLDisplay{R} where R<:Base.REPL.AbstractREPL}, Base.REPL.LineEditREPL})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}}}, Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}}, Type{Base.LineEdit.Prompt}, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.REPL.hist_from_file), Base.REPL.REPLHistoryProvider, Base.IOStream, String})
precompile(Tuple{typeof(Base.uvfinalize), Base.Process})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.KeyAlias, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Void, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.KeyAlias, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, String})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Void})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Any}, Void, Char})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Base.LineEdit.KeyAlias})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Any}, Base.LineEdit.KeyAlias, Char})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, String})
precompile(Tuple{typeof(Base.LineEdit.fixup_keymaps!), Base.Dict{Char, Any}, Int64, Char, Void})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :sticky), Tuple{String, String, Bool}}}, Tuple{String, String, Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :sticky), Tuple{String, String, Bool}}, Type{Base.LineEdit.Prompt}, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.LineEdit.setup_search_keymap), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.setup_prefix_keymap), Base.REPL.REPLHistoryProvider, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Char})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Char})
precompile(Tuple{typeof(Base.in), Char, Base.Set{Any}})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.run_interface), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.reseteof), Base.TTY})
precompile(Tuple{typeof(Base.check_open), Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, String})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{}, Void}})
precompile(Tuple{typeof(Base.take!), Base.Channel{Any}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.state), Base.LineEdit.MIState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.trylock), Base.Threads.TatasLock})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int64}}, Base.Threads.Atomic{Int64}})
precompile(Tuple{typeof(Base.unlock), Base.Threads.TatasLock})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{typeof(Base.LineEdit.prompt_string), typeof(Base.input_color)})
precompile(Tuple{Type{Base.LineEdit.InputAreaState}, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.eof), Base.TTY})
precompile(Tuple{typeof(Base.alloc_buf_hook), Base.TTY, UInt64})
precompile(Tuple{typeof(Base.read), Base.TTY, Type{UInt8}})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, SSAValue, SlotNumber, SlotNumber, SSAValue})
precompile(Tuple{typeof(Base.LineEdit.deactivate_region), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.LineEdit.PromptState, String})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.LineEdit.KeyAlias, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.Options})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, Int64, SlotNumber, Expr})
precompile(Tuple{typeof(Base.LineEdit.is_region_active), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.LineEdit.PromptState, Bool, Bool})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.isempty), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.buffer), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.LineEdit.PromptState, Char})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Char, Expr})
precompile(Tuple{typeof(Base.LineEdit.on_enter), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.REPL.return_callback), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.move_input_end), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.println), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.REPL.REPLHistoryProvider, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.InputAreaState}, Base.LineEdit.InputAreaState})
precompile(Tuple{typeof(Base.start), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.mode), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.eval), Module, Expr})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Expr, Base.REPL.REPLBackendRef})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Expr, Base.Channel{Any}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.REPL.eval_user_input), Expr, Base.REPL.REPLBackend})
precompile(Tuple{typeof(Base.REPL.eval), Module, Expr})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{Int64, 1}, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.REPL.print_response), Base.REPL.LineEditREPL, Array{Int64, 1}, Void, Bool, Bool})
precompile(Tuple{typeof(Base.REPL.print_response), Base.Terminals.TTYTerminal, Array{Int64, 1}, Void, Bool, Bool, Void})
precompile(Tuple{typeof(Core.Inference.isbits), Base.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.Multimedia.display), Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.Multimedia.display), typeof(Base.show)}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Array{Int64, 1}})
precompile(Tuple{Type{Base.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{Type{Base.IOContext{Base.Terminals.TTYTerminal}}, Base.Terminals.TTYTerminal, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Base.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, Core.Inference.Const, Type{NamedTuple{(:env,), Tuple{Base.IOContext{Base.Terminals.TTYTerminal}}}}, Core.Inference.Const, Core.Inference.Const, Core.Inference.Const, Type{Tuple{Any}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Base.OneTo{Int64}, Base.OneTo{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.start), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.first), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.OneTo{Int64}, String})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.commit_changes), Base.Terminals.TTYTerminal, Base.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.seekend), Base.IOStream})
precompile(Tuple{typeof(Base.print), Base.IOStream, String})
precompile(Tuple{typeof(Base.flush), Base.IOStream})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Base.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.LineEdit.region_active), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_move_up), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copy), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.copybuf!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.MIState}, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.history_prev_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Void, Base.LineEdit.Prompt}}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.LineEdit.cancel_beep), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.history_next_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PrefixSearchState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.accept_result), Base.LineEdit.MIState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PromptState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.SearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.LineEdit.InputAreaState, String})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.update_display_buffer), Base.LineEdit.SearchState, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.history_search), Base.REPL.REPLHistoryProvider, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool})
precompile(Tuple{typeof(Base.rsearch), String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.rsearch), String, String, Int64})
precompile(Tuple{typeof(Base.LineEdit.cancel_beep), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.SearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.edit_move_left), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.default_enter_cb), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{String, Symbol}})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Int8}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Error.Code})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Expr, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue})
precompile(Tuple{typeof(Core.Inference.invoke_tfunc), typeof(Base.finalizer), Type{Tuple{Ptr{Void}, Any}}, Type{Tuple{Ptr{Void}, Function}}, Core.Inference.InferenceState})
precompile(Tuple{Type{Core.Inference.InvokeData}, MethodTable, TypeMapEntry, Type{Tuple{typeof(Base.finalizer), Ptr{Void}, Any}}, Void, SSAValue})
precompile(Tuple{typeof(Core.Inference.isbits), InterruptException})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, SSAValue})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, TypedSlot, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Base.Markdown.HorizontalRule})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.ConfigEntry}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, GlobalRef, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SSAValue, String, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.IsInfinite})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Int64, 2}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, GlobalRef, SlotNumber})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Bool, typeof(Base.print_with_color), Symbol}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Bool, typeof(Base.print_with_color), Symbol}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Bool, typeof(Base.print_with_color), Symbol}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Bool, typeof(Base.print_with_color), QuoteNode, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{typeof(Base.lowercase)}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{typeof(Base.lowercase)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.lowercase)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SSAValue})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SlotNumber, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Base.SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SSAValue, Char})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SSAValue, Bool, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, typeof(Base.Broadcast._broadcast_getindex_eltype), SSAValue, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Int64, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Function}, Symbol})
precompile(Tuple{Type{Symbol}, Symbol, Int64})
precompile(Tuple{typeof(Base.SimdLoop.compile), Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Expr, Expr, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Broadcast.Scalar})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, GlobalRef})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, String, GlobalRef, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, String, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.OBJECT})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, Expr, String, SSAValue})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_SUBMODULE_IGNORE})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_MERGE_FILE_FAVOR})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_MERGE_FILE})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.Cstring}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.SignatureStruct}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{}}}}, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{}}}}}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.RebaseOperation}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Int64, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, String})
precompile(Tuple{typeof(Base.in), Base.SubString{String}, Base.KeySet{String, Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.:(==)), Base.LibGit2.Error.Code, Base.LibGit2.Error.Code})
precompile(Tuple{typeof(Base.skip), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{UInt8}})
precompile(Tuple{typeof(Base.mark), Base.IOStream})
precompile(Tuple{typeof(Base.reset), Base.IOStream})
precompile(Tuple{typeof(Base.unmark), Base.IOStream})
precompile(Tuple{typeof(Base.isnull), Base.Nullable{String}})
precompile(Tuple{typeof(Base.get), Base.Nullable{String}})
precompile(Tuple{Type{Expr}, Symbol, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isnull), Base.Nullable{Array{String, 1}}})
precompile(Tuple{typeof(Base.get), Base.Nullable{Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, Any}, 1}, String})
precompile(Tuple{typeof(Base.start), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.done), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.next), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.close), Base.LibGit2.GitRepo})
precompile(Tuple{typeof(Base.length), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Union{}, Union{}}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.Dict{String, Any}, 1}, Base.ObjectIdDict})
precompile(Tuple{typeof(Base.similar), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, String}, Base.ObjectIdDict})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##info")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.info), Base.IOStream, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_with_color), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.println_with_color), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.println), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{Type{Base.Random.UUID}, String})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.Random.UUID, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, Base.Random.UUID})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_with_color), Symbol, Base.TTY, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.TTY, String})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.getindex), Tuple{Symbol, String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.length), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.in), String, Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.start), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.next), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Array{String, 1}}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.done), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.start), Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.indexed_next), Base.Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.map), Type{Base.Random.UUID}, Base.ValueIterator{Base.Dict{String, Any}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{Base.Random.UUID}, Base.ValueIterator{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{String, Any}}, Type{Base.Random.UUID}}})
precompile(Tuple{typeof(Base.in), Base.Random.UUID, Array{Base.Random.UUID, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.start), Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.done), Base.ValueIterator{Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.next), Base.ValueIterator{Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.Random.UUID, 1}, Base.Random.UUID})
precompile(Tuple{typeof(Base.deepcopy), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("#kw##info")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.info), Base.IOStream, String})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:by,), Tuple{typeof(Base.lowercase)}}, typeof(Base.sort!), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Base.Random.UUID}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.in), String, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Base.Random.UUID}, String})
precompile(Tuple{typeof(Base.:(==)), Base.Random.UUID, Base.Random.UUID})
precompile(Tuple{typeof(Base.start), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.done), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.next), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.start), Base.Pair{String, String}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.Random.UUID, 1}})
precompile(Tuple{typeof(Base.start), Array{Base.Random.UUID, 1}})
precompile(Tuple{typeof(Base.done), Array{Base.Random.UUID, 1}, Int64})
precompile(Tuple{typeof(Base.next), Array{Base.Random.UUID, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.Random.UUID, Int64}, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.Random.UUID, String})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##readline")), NamedTuple{(:chomp,), Tuple{Bool}}, typeof(Base.readline), Base.IOStream})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Pair{String, String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Base.Random.UUID, Base.VersionNumber})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Random.UUID, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Random.UUID}, Base.Random.UUID})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.Random.UUID, Base.Dict{Base.VersionNumber, Bool}}, Base.Dict{Base.VersionNumber, Bool}, Base.Random.UUID})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.VersionNumber, Bool}, Base.VersionNumber})
precompile(Tuple{typeof(Base.isempty), Base.Dict{Base.VersionNumber, Bool}})
precompile(Tuple{typeof(Base.values), Base.Dict{Base.VersionNumber, Bool}})
precompile(Tuple{typeof(Base.any), Base.ValueIterator{Base.Dict{Base.VersionNumber, Bool}}})
precompile(Tuple{typeof(Base.copy), Base.Dict{Base.VersionNumber, Bool}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Base.VersionNumber, Bool}, Base.Dict{Base.VersionNumber, Bool}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Base.copy!), Array{Int64, 1}, Array{Union{}, 1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.maximum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String, SSAValue, SSAValue})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SSAValue, String, SSAValue})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.Random.UUID, String}, Base.Random.UUID})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.Random.UUID, Array{String, 1}}, Base.Random.UUID})
precompile(Tuple{typeof(Base.divrem), UInt32, UInt32})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(Base.spawn_opts_inherit), Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Any}, String, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.Random.UUID})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{String, Any}, 1}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.first), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base._require_search_from_serialized), Symbol, String})
precompile(Tuple{typeof(Base.precompilableerror), LoadError, Bool})
precompile(Tuple{Type{NamedTuple{(:stderr,), Tuple{Base.IOStream}}}, Tuple{Base.IOStream}})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.IOStream}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.spawn), Base.CmdRedirect, Tuple{Base.Pipe, Base.TTY, Base.IOStream}})
precompile(Tuple{getfield(Base, Symbol("#kw##spawn")), NamedTuple{(:chain,), Tuple{Base.Nullable{Base.ProcessChain}}}, typeof(Base.spawn), Base.Cmd, Tuple{Base.Pipe, Base.TTY, Base.IOStream}})
precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Ptr{Void}, Base.Process, Base.PipeEndpoint, Base.TTY, Base.Filesystem.File})
precompile(Tuple{typeof(Base._uv_hook_close), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Pipe, Expr})
precompile(Tuple{typeof(Base.Random.__init__)})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, Type{Any}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.RefValue{Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.WeakKeyDict{Any, Any}})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, LineNumberNode})
precompile(Tuple{typeof(Base.Serializer.serialize_any), Base.Serializer.SerializationState{Base.Pipe}, LineNumberNode})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, QuoteNode})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, Array{String, 1}})
precompile(Tuple{typeof(Base.__init__)})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, Tuple{Symbol, UInt64}})
precompile(Tuple{typeof(Base.write), Base.Pipe, UInt64})
precompile(Tuple{typeof(Base.Serializer.serialize), Base.Serializer.SerializationState{Base.Pipe}, Bool})
precompile(Tuple{typeof(Base.close), Base.Pipe})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.TTY})
precompile(Tuple{Type{Base.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.TTY, Base.IOStream})
precompile(Tuple{typeof(Base._start)})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Int64, Union{Base.Distributed.LocalProcess, Base.Distributed.Worker}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.DefaultClusterManager})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, GlobalRef, SSAValue, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.WorkerState})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.ProcessExitedException})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, QuoteNode, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg), Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Left})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:tunnel, :sshflags, :max_parallel), Tuple{Bool, Base.Cmd, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot, TypedSlot})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, String, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String, String, String})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.isbits), Array{Tuple{Module, String}, 1}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.SubString{String}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Bool}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Cstring})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.:(*)), Int64}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Int64, Int64, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, String, TypedSlot, String, TypedSlot, String, SlotNumber, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, GlobalRef, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Any, Any}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, Char})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Array{Base.StackTraces.StackFrame, 1}, 1}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef, SSAValue})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SSAValue, SlotNumber})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void}, Int64})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Void})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.REPLCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.ShellCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.LatexCompletions})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SlotNumber, SlotNumber, SlotNumber, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, GlobalRef, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, SlotNumber, TypedSlot, Expr})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:prefix,), Tuple{String}}}, Type{NamedTuple{(:bt,), Tuple{Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}}}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, TypedSlot, SlotNumber, Expr})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.eof), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.alloc_buf_hook), Base.PipeEndpoint, UInt64})
precompile(Tuple{typeof(Base._uv_hook_close), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Serializer.deserialize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.Serializer.deserialize), Base.Serializer.SerializationState{Base.PipeEndpoint}, Type{LineNumberNode}})
precompile(Tuple{typeof(Base.Serializer.deserialize), Base.Serializer.SerializationState{Base.PipeEndpoint}, Type{QuoteNode}})
precompile(Tuple{typeof(Base.start), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Serializer.deserialize), Base.Serializer.SerializationState{Base.PipeEndpoint}, Type{UInt64}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint, Type{UInt64}})
precompile(Tuple{typeof(Base.append!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.register_root_module), Symbol, Module})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}, Base.Pair{Symbol, Int64}})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Void}, 1}, Array{Any, 1}})
precompile(Tuple{Type{Base.InterpreterIP}, CodeInfo, Ptr{Void}})
precompile(Tuple{typeof(Base.display_error), LoadError, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.display_error), Base.IOStream, LoadError, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Void, Bool, Bool, Ptr{Void}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Core.MethodInstance, Bool, Bool, Ptr{Void}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, CodeInfo, Bool, Bool, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, UInt64})
precompile(Tuple{typeof(Base.StackTraces.is_loc_meta), Expr, Symbol})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_with_color), Symbol, Base.IOStream, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOStream, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOStream, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.IOStream}, LoadError, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.IOStream}, LoadError, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##showerror")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.IOStream}, ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, SSAValue, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue})
precompile(Tuple{typeof(Base.resize!), Array{Tuple{String, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.start), Tuple{Base.StackTraces.StackFrame, Int64}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.StackTraces.StackFrame, Int64}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.IOStream}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.IOStream}, String})
precompile(Tuple{typeof(Base.push!), Array{Tuple{String, Int64}, 1}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.IOStream}, Symbol, Type{Tuple{typeof(Base.include_relative), Module, String}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.IOStream}, String, Type{Module}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.IOStream}, Type{Module}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.IOStream}, Type{Module}})
precompile(Tuple{typeof(Base.println), Base.IOStream})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base.Distributed.terminate_all_workers)})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Float64}})
precompile(Tuple{typeof(Base.uvfinalize), Base.TTY})
precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Void}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.start), Tuple{ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.REPL.print_response), Base.REPL.LineEditREPL, ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.REPL.print_response), Base.Terminals.TTYTerminal, ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}, Bool, Bool, Void})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Void, Bool, Bool, Ptr{Void}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Core.MethodInstance, Bool, Bool, Ptr{Void}})
precompile(Tuple{typeof(Base.vcat), Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_with_color), Symbol, Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.Terminals.TTYTerminal, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.Terminals.TTYTerminal}, ErrorException, Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.resize!), Array{Tuple{String, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.start), Tuple{Base.StackTraces.StackFrame, Int64}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.StackTraces.StackFrame, Int64}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.Terminals.TTYTerminal}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.push!), Array{Tuple{String, Int64}, 1}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.Terminals.TTYTerminal}, Symbol, Type{Tuple{typeof(Base.compilecache), String}}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, Type{String}})
precompile(Tuple{typeof(Base.error)})
precompile(Tuple{typeof(Base.string)})
precompile(Tuple{Type{Base.InterpreterIP}, CodeInfo, Ptr{Void}})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, CodeInfo, Bool, Bool, Int64})
precompile(Tuple{typeof(Base.LineEdit.options), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_abort), Base.LineEdit.MIState, Bool})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base.Distributed.terminate_all_workers)})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Float64}})
precompile(Tuple{typeof(Base.uvfinalize), Base.TTY})
precompile(Tuple{typeof(Base.Random.__init__)})
precompile(Tuple{typeof(Base.__init__)})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.TTY})
precompile(Tuple{Type{Base.Terminals.TTYTerminal}, String, Base.TTY, Base.TTY, Base.IOStream})
precompile(Tuple{typeof(Base._start)})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Int64, Union{Base.Distributed.LocalProcess, Base.Distributed.Worker}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.DefaultClusterManager})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, GlobalRef, SSAValue, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.WorkerState})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Distributed.ProcessExitedException})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg)}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, QuoteNode, typeof(Base.invokelatest), typeof(Base.Distributed.serialize_msg), Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Left})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:tunnel, :sshflags, :max_parallel), Tuple{Bool, Base.Cmd, Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot, TypedSlot})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, TypedSlot})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, String, SSAValue, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, String, String, String})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.show)}})
precompile(Tuple{typeof(Core.Inference.isbits), Array{Tuple{Module, String}, 1}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.SubString{String}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Bool}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Base.DevNullStream, Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Cstring})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.:(*)), Int64}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.:(*)), Int64}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Int64, Int64, Int64, Expr})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, TypedSlot, String, TypedSlot, String, TypedSlot, String, SlotNumber, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, GlobalRef, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Any, Any}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, Char})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Array{Base.StackTraces.StackFrame, 1}, 1}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, GlobalRef, SSAValue})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.__atreplinit)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.display_error)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{NamedTuple{(), Tuple{}}, typeof(Base.invokelatest), typeof(Base.Multimedia.display)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SSAValue, SlotNumber})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void}, Int64})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Void})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.REPLCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.ShellCompletionProvider})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.LatexCompletions})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SlotNumber, SlotNumber, SlotNumber, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, GlobalRef, SlotNumber, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, SlotNumber, TypedSlot, Expr})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:prefix,), Tuple{String}}}, Type{NamedTuple{(:bt,), Tuple{Array{Union{Ptr{Void}, Base.InterpreterIP}, 1}}}}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, TypedSlot, SlotNumber, Expr})
precompile(Tuple{typeof(Base.require), Symbol})
precompile(Tuple{typeof(Base.try_include), Module, String})
precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Ptr{Void}, Base.Process, Base.DevNullStream, Base.DevNullStream, Base.DevNullStream})
precompile(Tuple{typeof(Base.convert), Type{Base.Cstring}, Ptr{Void}})
precompile(Tuple{typeof(Base._uv_hook_close), Base.Process})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Base.REPL.LineEditREPL}, Base.Terminals.TTYTerminal, Bool, Bool})
precompile(Tuple{Type{Base.REPL.LineEditREPL}, Base.Terminals.TTYTerminal, Bool, String, String, String, String, String, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Base.REPL.REPLDisplay{R} where R<:Base.REPL.AbstractREPL}, Base.REPL.LineEditREPL})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}}}, Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), Base.REPL.LineEditREPL, Base.REPL.REPLCompletionProvider, typeof(Base.REPL.return_callback)}}, Type{Base.LineEdit.Prompt}, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.REPL.hist_from_file), Base.REPL.REPLHistoryProvider, Base.IOStream, String})
precompile(Tuple{typeof(Base.uvfinalize), Base.Process})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, Char})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.KeyAlias, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Void, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.KeyAlias, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, String})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Void})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Any}, Void, Char})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Base.LineEdit.KeyAlias})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Char, Any}, Base.LineEdit.KeyAlias, Char})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, String})
precompile(Tuple{typeof(Base.LineEdit.fixup_keymaps!), Base.Dict{Char, Any}, Int64, Char, Void})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :sticky), Tuple{String, String, Bool}}}, Tuple{String, String, Bool}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :sticky), Tuple{String, String, Bool}}, Type{Base.LineEdit.Prompt}, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.LineEdit.setup_search_keymap), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.setup_prefix_keymap), Base.REPL.REPLHistoryProvider, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Char})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Char})
precompile(Tuple{typeof(Base.in), Char, Base.Set{Any}})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.run_interface), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.reseteof), Base.TTY})
precompile(Tuple{typeof(Base.check_open), Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, String})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{}, Void}})
precompile(Tuple{typeof(Base.take!), Base.Channel{Any}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.state), Base.LineEdit.MIState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.trylock), Base.Threads.TatasLock})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int64}}, Base.Threads.Atomic{Int64}})
precompile(Tuple{typeof(Base.unlock), Base.Threads.TatasLock})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{typeof(Base.LineEdit.prompt_string), typeof(Base.input_color)})
precompile(Tuple{Type{Base.LineEdit.InputAreaState}, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.eof), Base.TTY})
precompile(Tuple{typeof(Base.alloc_buf_hook), Base.TTY, UInt64})
precompile(Tuple{typeof(Base.read), Base.TTY, Type{UInt8}})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, QuoteNode, SSAValue, SlotNumber, SlotNumber, SSAValue})
precompile(Tuple{typeof(Base.LineEdit.deactivate_region), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.LineEdit.PromptState, String})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.LineEdit.KeyAlias, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.REPL.Options})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, Int64, SlotNumber, Expr})
precompile(Tuple{typeof(Base.LineEdit.is_region_active), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.LineEdit.PromptState, Bool, Bool})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.isempty), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.buffer), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.LineEdit.PromptState, Char})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Char, Expr})
precompile(Tuple{typeof(Base.LineEdit.on_enter), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.REPL.return_callback), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.move_input_end), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.println), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.REPL.REPLHistoryProvider, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.Prompt, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.InputAreaState}, Base.LineEdit.InputAreaState})
precompile(Tuple{typeof(Base.start), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.mode), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.eval), Module, Expr})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Expr, Base.REPL.REPLBackendRef})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Expr, Base.Channel{Any}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.REPL.eval_user_input), Expr, Base.REPL.REPLBackend})
precompile(Tuple{typeof(Base.REPL.eval), Module, Expr})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{Int64, 1}, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.REPL.print_response), Base.REPL.LineEditREPL, Array{Int64, 1}, Void, Bool, Bool})
precompile(Tuple{typeof(Base.REPL.print_response), Base.Terminals.TTYTerminal, Array{Int64, 1}, Void, Bool, Bool, Void})
precompile(Tuple{typeof(Core.Inference.isbits), Base.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.Multimedia.display), Int64}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.Multimedia.display), typeof(Base.show)}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Array{Int64, 1}})
precompile(Tuple{Type{Base.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{Type{Base.IOContext{Base.Terminals.TTYTerminal}}, Base.Terminals.TTYTerminal, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Base.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, Core.Inference.Const, Type{NamedTuple{(:env,), Tuple{Base.IOContext{Base.Terminals.TTYTerminal}}}}, Core.Inference.Const, Core.Inference.Const, Core.Inference.Const, Type{Tuple{Any}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Base.OneTo{Int64}, Base.OneTo{Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.start), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.first), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Base.OneTo{Int64}, String})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.commit_changes), Base.Terminals.TTYTerminal, Base.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.seekend), Base.IOStream})
precompile(Tuple{typeof(Base.print), Base.IOStream, String})
precompile(Tuple{typeof(Base.flush), Base.IOStream})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Base.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.LineEdit.region_active), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_move_up), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.copy), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.isequal), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.copybuf!), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.MIState}, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.history_prev_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Void, Base.LineEdit.Prompt}}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.LineEdit.cancel_beep), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.history_next_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PrefixSearchState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.accept_result), Base.LineEdit.MIState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PromptState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.SearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.LineEdit.InputAreaState, String})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.update_display_buffer), Base.LineEdit.SearchState, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.history_search), Base.REPL.REPLHistoryProvider, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool})
precompile(Tuple{typeof(Base.rsearch), String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.rsearch), String, String, Int64})
precompile(Tuple{typeof(Base.LineEdit.cancel_beep), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.SearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.edit_move_left), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.default_enter_cb), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Dict{String, Symbol}})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Int8}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Error.Code})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Expr, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SSAValue})
precompile(Tuple{typeof(Core.Inference.invoke_tfunc), typeof(Base.finalizer), Type{Tuple{Ptr{Void}, Any}}, Type{Tuple{Ptr{Void}, Function}}, Core.Inference.InferenceState})
precompile(Tuple{Type{Core.Inference.InvokeData}, MethodTable, TypeMapEntry, Type{Tuple{typeof(Base.finalizer), Ptr{Void}, Any}}, Void, SSAValue})
precompile(Tuple{typeof(Core.Inference.isbits), InterruptException})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, SSAValue})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, TypedSlot, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, Base.Markdown.HorizontalRule})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.ConfigEntry}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, GlobalRef, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SSAValue, String, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.IsInfinite})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{Int64, 2}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, GlobalRef, SlotNumber})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Bool, typeof(Base.print_with_color), Symbol}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Bool, typeof(Base.print_with_color), Symbol}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Bool, typeof(Base.print_with_color), Symbol}})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Bool, typeof(Base.print_with_color), QuoteNode, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), NamedTuple{(:by,), Tuple{typeof(Base.lowercase)}}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Order.By{typeof(Base.lowercase)}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{typeof(Base.lowercase)}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SSAValue})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SlotNumber, String, SlotNumber})
precompile(Tuple{typeof(Core.Inference.isbits), Base.SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{}, Tuple{}, Tuple{}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, SlotNumber, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, SSAValue, Char})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SSAValue, Bool, Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, typeof(Base.Broadcast._broadcast_getindex_eltype), SSAValue, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Int64, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Function}, Symbol})
precompile(Tuple{Type{Symbol}, Symbol, Int64})
precompile(Tuple{typeof(Base.SimdLoop.compile), Expr})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, Expr, Expr, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.Broadcast.Scalar})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SlotNumber, String, GlobalRef})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SlotNumber})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SlotNumber, String, GlobalRef, String})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String, SSAValue, String})
precompile(Tuple{typeof(Core.Inference.getindex), Type{Any}, GlobalRef, SlotNumber, String, Expr})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.OBJECT})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, String, Expr, String, SSAValue})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_SUBMODULE_IGNORE})
precompile(Tuple{typeof(Core.Inference.eltype), Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_MERGE_FILE_FAVOR})
precompile(Tuple{typeof(Core.Inference.isbits), Base.LibGit2.Consts.GIT_MERGE_FILE})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.Cstring}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.SignatureStruct}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{}}}}, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{}}}}}, Int64})
precompile(Tuple{typeof(Core.Inference.isbits), Ptr{Base.LibGit2.RebaseOperation}})
precompile(Tuple{typeof(Core.Inference.isbits), Tuple{Int64, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Expr}, Symbol, GlobalRef, SSAValue, SSAValue, String})
precompile(Tuple{typeof(Base.in), Base.SubString{String}, Base.KeySet{String, Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.:(==)), Base.LibGit2.Error.Code, Base.LibGit2.Error.Code})
precompile(Tuple{typeof(Base.skip), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.read), Base.IOStream, Type{UInt8}})
precompile(Tuple{typeof(Base.mark), Base.IOStream})
precompile(Tuple{typeof(Base.reset), Base.IOStream})
precompile(Tuple{typeof(Base.unmark), Base.IOStream})
precompile(Tuple{typeof(Base.isnull), Base.Nullable{String}})
precompile(Tuple{typeof(Base.get), Base.Nullable{String}})
precompile(Tuple{Type{Expr}, Symbol, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isnull), Base.Nullable{Array{String, 1}}})
precompile(Tuple{typeof(Base.get), Base.Nullable{Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, Any}, 1}, String})
precompile(Tuple{typeof(Base.start), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.done), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.next), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.close), Base.LibGit2.GitRepo})
precompile(Tuple{typeof(Base.length), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.Dict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Union{}, Union{}}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.Dict{String, Any}, 1}, Base.ObjectIdDict})
precompile(Tuple{typeof(Base.similar), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, String}, Base.ObjectIdDict})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##info")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.info), Base.IOStream, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_with_color), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.println_with_color), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(Base.println), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{Type{Base.Random.UUID}, String})
